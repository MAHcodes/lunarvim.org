import{r as e,o as t,c as o,a as n,b as p,F as r,e as c,d as s}from"./app.d32544d0.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u=c(`<h1 id="custom-snippets" tabindex="-1"><a class="header-anchor" href="#custom-snippets" aria-hidden="true">#</a> Custom snippets</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>You can add your own snippets to LunarVim.</p><p>Custom snippets can be defined as json or lua.</p><h3 id="json-version" tabindex="-1"><a class="header-anchor" href="#json-version" aria-hidden="true">#</a> json version</h3><p>First create a folder : <code>~/.config/lvim/snippets/</code> next to your <code>config.lua</code></p><p>Then in there you need at least 2 files.</p><p>The first file describes where your snippets are :</p><p><code>package.json</code> :</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nvim-snippets&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;authorname&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;vscode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.11.0&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;contributes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;snippets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;language&quot;</span><span class="token operator">:</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./python.json&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>For each language, create a file like this :</p><p><code>python.json</code> :</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;hello&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prefix&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;print(&#39;Hello, World!&#39;)&quot;</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;print Hello, World!&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>You should be able to expand <code>hello</code> into <code>print(&quot;Hello, World!&quot;)</code></p><h3 id="lua-version" tabindex="-1"><a class="header-anchor" href="#lua-version" aria-hidden="true">#</a> lua version</h3><p>First create a folder named <code>luasnippets</code> next to your <code>config.lua</code>. For example <code>~/.config/lvim/luasnippets/</code></p><p>Then, inside that folder, create a lua file named with the filetype you want to create snippets for. For example, for creating snippets for lua, create a (redundant, but correct) file named <code>lua.lua</code>. Then you put your files there like this:</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token keyword">return</span> <span class="token punctuation">{</span>
  <span class="token function">s</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> t <span class="token string">&quot;Expands to bar&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,18),d=s("LuaSnip is able to hot-reload snippets defined in lua when you save them, but you may need to restart LunarVim the first time you create the snippet files. Please note that LuaSnip injects a bunch of utility globals when it loads your snippets (in this example the "),b=n("code",null,"s",-1),h=s(" and "),m=n("code",null,"t",-1),k=s(" functions), so you don't need to care about requiring or defining them. To get more detailed information and examples please read the "),q={href:"https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.md#lua",target:"_blank",rel:"noopener noreferrer"},f=s("LuaSnip docs about this topic"),g=n("h3",{id:"todo-snipmate-version",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#todo-snipmate-version","aria-hidden":"true"},"#"),s(" TODO: snipmate version")],-1);function y(_,v){const a=e("ExternalLinkIcon");return t(),o(r,null,[u,n("p",null,[d,b,h,m,k,n("a",q,[f,p(a)])]),g],64)}var L=l(i,[["render",y]]);export{L as default};
